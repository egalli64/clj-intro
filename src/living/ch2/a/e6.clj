;; clj-intro - Introduction to Clojure
;; https://github.com/egalli64/clj-intro
;;
;; For more info read Living Clojure by Carin Meier
;; Flow control: if, if-let

;; if
(println "True is truthy:" (if true "it is true" "it is false"))
(println "False is falsey:" (if false "it is true" "it is false"))
(println "Nil is falsey:" (if nil "it is true" "it is false"))
(println "Anything else is truthy:" (if "" "it is true" "it is false"))

;; randomly assign 0 or 1 to a local binding
(let [head-or-tail (rand-int 2)]
  ;; use the random value in a conditional expression
  (println (if (zero? head-or-tail) "head" "tail"))
  (println "The extracted value was" head-or-tail))

;; if-let
;; a function that generates an even value, or nil
(defn even-dice [] (let [dice (rand-int 6)] (if (odd? dice) (inc dice) nil)))

;; if the value generated by even-dice is good, store it in the local binding and use it in the "true" branch
(println (if-let [value (even-dice)] (str value " is your even value") "you get an unspecified odd value"))
