;; clj-intro - Introduction to Clojure
;; https://github.com/egalli64/clj-intro
;;
;; For more info read Living Clojure by Carin Meier
;; Flow control: when, when-let - useful to remark that no "else" branch in present

;; when
(println "Only 'true' branch for when:" (when true "it is true"))
(println "No 'else' branch:" (when false "unexpected"))

;; randomly assign 0 or 1 to a local binding
(let [head-or-tail (rand-int 2)]
  ;; use the random value in a conditional expression
  (println "Only the 'good' values deserve a following message:" (when (zero? head-or-tail) "head"))
  (println "The extracted value was" head-or-tail))

;; when-let
;; a function that generates an even value, or nil
(defn even-dice [] (let [dice (rand-int 6)] (if (odd? dice) (inc dice) nil)))

;; if the value generated by even-dice is good, store it in the local binding and use it in the "true" branch
(println "Only the 'good' values deserve a following message:" (when-let [value (even-dice)] (str value " is your even value")))
